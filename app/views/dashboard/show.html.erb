<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Food Planner - Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&family=Satisfy&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Poppins', sans-serif; color: #111827; }
        .font-display-prototype { font-family: 'Satisfy', cursive; }
        .text-shadow-dark-prototype { text-shadow: 0px 2px 3px rgba(0, 0, 0, 0.2); }
        .main-dashboard-area { flex-grow: 1; overflow-y: auto; padding: 1.5rem 1.5rem; }
        .conceptual-timer {
            width: 180px; height: 180px; border-radius: 50%; background-color: #fbfdf8; margin: 2.5rem auto;
            display: flex; flex-direction: column; align-items: center; justify-content: center;
            position: relative; border: 8px solid #f0f0f0; box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }
        .conceptual-timer .progress-segment { position: absolute; width: 100%; height: 100%; border-radius: 50%; clip-path: polygon(50% 0%, 100% 0%, 100% 33%, 50% 33%); }
        .conceptual-timer .prep { background-color: #F0AB1F; transform: rotate(0deg) scale(1.01); z-index: 3; }
        .conceptual-timer .cook { background-color: #FD7E14; transform: rotate(120deg) scale(1.01); z-index: 2; }
        .conceptual-timer .eat { background-color: #5AD479; transform: rotate(240deg) scale(1.01); z-index: 1; }
        .conceptual-timer .inner-circle { width: calc(100% - 24px); height: calc(100% - 24px); background-color: #fbfdf8; border-radius: 50%; display: flex; flex-direction: column; align-items: center; justify-content: center; z-index: 4; text-align: center; }
        .conceptual-timer .time { font-size: 2.5rem; font-weight: 700; color: #333333; font-family: 'Poppins', sans-serif; }
        .conceptual-timer .label { font-size: 0.8rem; color: #6B7280; margin-top: -0.25rem; }
        .meal-item { cursor: pointer; transition: background-color 0.2s; }
        .meal-item.current h3 { font-size: 1.25rem; color: #34C759; }
        .eyebrow-buttons-container { display: flex; gap: 0.5rem; overflow-x: auto; padding: 0.5rem 0 1rem 0; margin-bottom: 1rem; -ms-overflow-style: none; scrollbar-width: none; }
        .eyebrow-buttons-container::-webkit-scrollbar { display: none; }
        .eyebrow-btn { white-space: nowrap; }

        /* Added Circular Timer Demo CSS */
        .circular-timer-demo {
            width: 180px; /* Adjusted for dashboard */
            height: 180px; /* Adjusted for dashboard */
            border-radius: 50%;
            background-color: #fbfdf8; /* fp-neutral-lightest - Final background revealed */
            display: flex; flex-direction: column; align-items: center; justify-content: center;
            position: relative;
            border: 8px solid #f0f0f0; /* Base static track */
            box-shadow: 0 4px 10px rgba(0,0,0,0.1); /* Existing shadow */
            margin: 2.5rem auto; /* Existing margin */
        }
        .timer-layer {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            /* Conic gradient for receding effect will be applied via inline style */
        }
        .timer-layer-until-prep { z-index: 5; background-color: #5A6AD4; /* Blue */ }
        .timer-layer-prep       { z-index: 4; background-color: #F0AB1F; /* Yellow */ }
        .timer-layer-cook       { z-index: 3; background-color: #FD7E14; /* Orange */ }
        .timer-layer-eat        { z-index: 2; background-color: #5AD479; /* Green */ }
        /* Base track is the border of .circular-timer-demo, final reveal is its background */

        .circular-timer-demo .inner-circle {
            width: calc(100% - 24px); height: calc(100% - 24px);
            background-color: #fbfdf8; /* fp-neutral-lightest */
            border-radius: 50%;
            display: flex; flex-direction: column; align-items: center; justify-content: center;
            z-index: 6; /* Above all timer layers */
            text-align: center;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.05);
        }
        .circular-timer-demo .time-left { /* Renamed from .time for consistency */
            font-size: 2.5rem; /* Kept from old .time */
            font-weight: 700; /* font-bold */
            color: #333333; /* fp-neutral-darkest */
            font-family: 'Poppins', sans-serif; /* Ensure Poppins for time */
        }
        .circular-timer-demo .status { /* Renamed from .label for consistency */
            font-size: 0.8rem; /* Kept from old .label */
            color: #6B7280; /* fp-neutral-text-light */
            margin-top: -0.25rem; /* Kept from old .label */
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="w-full max-w-[430px] sm:max-w-sm md:max-w-md lg:max-w-lg xl:max-w-xl 2xl:max-w-2xl mx-auto bg-fp-body-bg flex flex-col min-h-screen shadow-xl">
        <!-- Header Area - Could include date, profile icon -->
        <header class="p-5 bg-fp-neutral-lightest shadow-sm flex justify-between items-center">
            <div>
                <p class="text-xs text-fp-neutral-text-light">Tuesday, Oct 26</p>
                <h1 class="font-display-prototype text-2xl text-fp-neutral-darkest">Good Morning!</h1>
            </div>
            <button type="button" id="profileStatsBtn">
                <%= image_tag @current_user.avatar_url, alt: "User Avatar", class: "w-10 h-10 rounded-full border-2 border-fp-primary-green p-0.5 bg-white" %>
            </button>
        </header>

        <!-- Main Dashboard Area -->
        <main class="main-dashboard-area">
            <!-- Eyebrow Quick Actions -->
            <div class="eyebrow-buttons-container">
                <button class="eyebrow-btn bg-fp-primary-green text-white text-xs font-medium py-2 px-4 rounded-full shadow-fp-cta">Start Next Meal</button>
                <button class="eyebrow-btn bg-fp-accent-blue text-white text-xs font-medium py-2 px-4 rounded-full shadow-fp-cta">Scan Barcode</button>
                <button class="eyebrow-btn bg-white text-fp-neutral-text text-xs font-medium py-2 px-4 rounded-full border border-fp-neutral-medium shadow-sm">Quick Add Item</button>
                <button class="eyebrow-btn bg-white text-fp-neutral-text text-xs font-medium py-2 px-4 rounded-full border border-fp-neutral-medium shadow-sm">Browse Recipes</button>
            </div>

            <!-- Conceptual Meal Timer -->
            <div class="flex gap-6">
                <div class="circular-timer-demo" id="dashboardLiveTimer">
                    <div class="timer-layer timer-layer-until-prep"></div>
                    <div class="timer-layer timer-layer-prep"></div>
                    <div class="timer-layer timer-layer-cook"></div>
                    <div class="timer-layer timer-layer-eat"></div>
                    <div class="inner-circle">
                        <div class="time-left">03:45</div>
                        <div class="status">Until Prep</div>
                    </div>
                </div>

                <!-- Nutrient Stats Section -->
                <div class="flex-1 bg-white p-4 rounded-fp shadow-fp-card">
                    <h2 class="text-lg font-semibold text-fp-neutral-darkest mb-3">Daily Nutrient Targets</h2>

                    <!-- Energy -->
                    <div class="mb-4">
                        <h3 class="text-sm font-medium text-fp-neutral-text-light mb-1">Energy</h3>
                        <div class="flex justify-between items-center">
                            <span class="text-2xl font-bold text-fp-primary-green"><%= @nutrient_calculation&.dig(:energy, :eer_kcal_day) || '--' %> kcal</span>
                            <span class="text-xs text-fp-neutral-text-light">Daily Target</span>
                        </div>
                    </div>

                    <!-- Macronutrients -->
                    <div class="grid grid-cols-3 gap-4 mb-4">
                        <!-- Protein -->
                        <div class="text-center">
                            <h4 class="text-xs font-medium text-fp-neutral-text-light mb-1">Protein</h4>
                            <div class="text-lg font-semibold text-fp-accent-blue">
                                <%= @nutrient_calculation&.dig(:macronutrients, :protein, :rda_g_total) || '--' %>g
                            </div>
                        </div>
                        <!-- Carbs -->
                        <div class="text-center">
                            <h4 class="text-xs font-medium text-fp-neutral-text-light mb-1">Carbs</h4>
                            <div class="text-lg font-semibold text-fp-accent-yellow">
                                <%= @nutrient_calculation&.dig(:macronutrients, :carbohydrates, :rda_g) || '--' %>g
                            </div>
                        </div>
                        <!-- Fat -->
                        <div class="text-center">
                            <h4 class="text-xs font-medium text-fp-neutral-text-light mb-1">Fat</h4>
                            <div class="text-lg font-semibold text-fp-primary-green">
                                <%= @nutrient_calculation&.dig(:macronutrients, :fat, :total_fat, :amdr, :grams, :min_grams) || '--' %>g
                            </div>
                        </div>
                    </div>

                    <!-- BMI -->
                    <div class="border-t border-fp-neutral-medium pt-3">
                        <div class="flex justify-between items-center">
                            <div>
                                <h3 class="text-sm font-medium text-fp-neutral-text-light">BMI</h3>
                                <div class="text-lg font-semibold text-fp-neutral-darkest">
                                    <%= @nutrient_calculation&.dig(:bmi, :value) || '--' %>
                                </div>
                            </div>
                            <div class="text-right">
                                <span class="text-xs text-fp-neutral-text-light">Status</span>
                                <div class="text-sm font-medium <%= bmi_status_color(@nutrient_calculation&.dig(:bmi, :category)) %>">
                                    <%= @nutrient_calculation&.dig(:bmi, :category) || '--' %>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Full DRI Report Button -->
                    <div class="mt-4">
                        <button id="fullDriReportBtn" class="w-full bg-fp-accent-blue text-white text-sm font-medium py-2 px-4 rounded-fp shadow-fp-cta hover:bg-fp-accent-blue-dark transition-colors">
                            Full DRI Report
                        </button>
                    </div>
                </div>
            </div>

            <!-- Full DRI Report Modal -->
            <div id="fullDriReportModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 hidden z-50">
                <div class="bg-white p-6 rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-semibold">Complete Dietary Reference Intake Report</h2>
                        <button id="closeDriReportBtn" class="text-fp-neutral-text-light hover:text-fp-neutral-darkest">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                        </button>
                    </div>

                    <!-- Energy Section -->
                    <div class="mb-6">
                        <h3 class="text-lg font-semibold text-fp-neutral-darkest mb-2">Energy Requirements</h3>
                        <div class="bg-fp-neutral-lightest p-4 rounded-fp">
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <p class="text-sm text-fp-neutral-text-light">Estimated Energy Requirement (EER)</p>
                                    <p class="text-lg font-semibold text-fp-primary-green">
                                        <%= @nutrient_calculation&.dig(:energy, :eer_kcal_day) || '--' %> kcal/day
                                    </p>
                                </div>
                                <div>
                                    <p class="text-sm text-fp-neutral-text-light">Prediction Interval</p>
                                    <p class="text-lg font-semibold text-fp-neutral-darkest">
                                        <%= @nutrient_calculation&.dig(:energy, :prediction_interval_kcal_day) || '--' %>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Macronutrients Section -->
                    <div class="mb-6">
                        <h3 class="text-lg font-semibold text-fp-neutral-darkest mb-2">Macronutrients</h3>
                        <div class="bg-fp-neutral-lightest p-4 rounded-fp space-y-4">
                            <!-- Protein -->
                            <div>
                                <h4 class="text-sm font-medium text-fp-accent-blue mb-1">Protein</h4>
                                <div class="grid grid-cols-2 gap-4">
                                    <div>
                                        <p class="text-xs text-fp-neutral-text-light">RDA per kg</p>
                                        <p class="text-sm font-semibold"><%= @nutrient_calculation&.dig(:macronutrients, :protein, :rda_g_per_kg) || '--' %> g/kg</p>
                                    </div>
                                    <div>
                                        <p class="text-xs text-fp-neutral-text-light">Total RDA</p>
                                        <p class="text-sm font-semibold"><%= @nutrient_calculation&.dig(:macronutrients, :protein, :rda_g_total) || '--' %> g</p>
                                    </div>
                                    <div>
                                        <p class="text-xs text-fp-neutral-text-light">AMDR Range</p>
                                        <p class="text-sm font-semibold">
                                            <%= @nutrient_calculation&.dig(:macronutrients, :protein, :amdr, :percent_min) || '--' %>% -
                                            <%= @nutrient_calculation&.dig(:macronutrients, :protein, :amdr, :percent_max) || '--' %>%
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <!-- Carbohydrates -->
                            <div>
                                <h4 class="text-sm font-medium text-fp-accent-yellow mb-1">Carbohydrates</h4>
                                <div class="grid grid-cols-2 gap-4">
                                    <div>
                                        <p class="text-xs text-fp-neutral-text-light">RDA</p>
                                        <p class="text-sm font-semibold"><%= @nutrient_calculation&.dig(:macronutrients, :carbohydrates, :rda_g) || '--' %> g</p>
                                    </div>
                                    <div>
                                        <p class="text-xs text-fp-neutral-text-light">AMDR Range</p>
                                        <p class="text-sm font-semibold">
                                            <%= @nutrient_calculation&.dig(:macronutrients, :carbohydrates, :amdr_percent_min) || '--' %>% -
                                            <%= @nutrient_calculation&.dig(:macronutrients, :carbohydrates, :amdr_percent_max) || '--' %>%
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <!-- Fat -->
                            <div>
                                <h4 class="text-sm font-medium text-fp-primary-green mb-1">Fat</h4>
                                <div class="grid grid-cols-2 gap-4">
                                    <div>
                                        <p class="text-xs text-fp-neutral-text-light">Total Fat AMDR</p>
                                        <p class="text-sm font-semibold">
                                            <%= @nutrient_calculation&.dig(:macronutrients, :fat, :total_fat, :amdr, :percent_min) || '--' %>% -
                                            <%= @nutrient_calculation&.dig(:macronutrients, :fat, :total_fat, :amdr, :percent_max) || '--' %>%
                                        </p>
                                    </div>
                                    <div>
                                        <p class="text-xs text-fp-neutral-text-light">Saturated Fat Limit</p>
                                        <p class="text-sm font-semibold">
                                            <%= @nutrient_calculation&.dig(:macronutrients, :fat, :saturated_fat, :limit_percent_eer) || '--' %>% of EER
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Micronutrients Section -->
                    <div class="mb-6">
                        <h3 class="text-lg font-semibold text-fp-neutral-darkest mb-2">Micronutrients</h3>
                        <div class="bg-fp-neutral-lightest p-4 rounded-fp">
                            <div class="grid grid-cols-2 gap-4">
                                <% if @nutrient_calculation&.dig(:micronutrients) %>
                                    <% @nutrient_calculation[:micronutrients].each do |nutrient, values| %>
                                        <div class="mb-3">
                                            <h4 class="text-sm font-medium text-fp-neutral-darkest mb-1"><%= nutrient.to_s.titleize %></h4>
                                            <div class="space-y-1">
                                                <% if values[:rda] %>
                                                    <p class="text-xs text-fp-neutral-text-light">RDA</p>
                                                    <p class="text-sm font-semibold"><%= values[:rda][:value] %> <%= values[:rda][:unit] %></p>
                                                <% end %>
                                                <% if values[:ai] %>
                                                    <p class="text-xs text-fp-neutral-text-light">AI</p>
                                                    <p class="text-sm font-semibold"><%= values[:ai][:value] %> <%= values[:ai][:unit] %></p>
                                                <% end %>
                                                <% if values[:ul] %>
                                                    <p class="text-xs text-fp-neutral-text-light">UL</p>
                                                    <p class="text-sm font-semibold"><%= values[:ul][:value] %> <%= values[:ul][:unit] %></p>
                                                <% end %>
                                            </div>
                                        </div>
                                    <% end %>
                                <% else %>
                                    <p class="text-sm text-fp-neutral-text-light">No micronutrient data available</p>
                                <% end %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Upcoming Meals Section -->
            <section class="mt-8">
                <h2 class="text-lg font-semibold text-fp-neutral-darkest mb-3">Upcoming Meals</h2>

                <!-- Meal Item 1 (Current / Next) -->
                <div class="meal-item current bg-fp-neutral-lightest p-4 rounded-fp shadow-fp-card mb-3 flex items-center space-x-4">
                    <img src="https://images.unsplash.com/photo-1546069901-ba9599a7e63c?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80" alt="Spaghetti Carbonara" class="w-16 h-16 rounded-md object-cover">
                    <div class="flex-grow">
                        <h3 class="font-semibold text-fp-primary-green-dark">Spaghetti Carbonara</h3>
                        <p class="text-xs text-fp-neutral-text-light">Lunch - Today, 12:30 PM</p>
                        <div class="flex items-center mt-1">
                            <svg class="w-3 h-3 text-fp-accent-yellow mr-1" fill="currentColor" viewBox="0 0 20 20"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path></svg>
                            <span class="text-xs text-fp-neutral-text-light">4.5 (23 reviews)</span>
                        </div>
                    </div>
                    <svg class="w-6 h-6 text-fp-neutral-medium" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>
                </div>

                <!-- Meal Item 2 -->
                <div class="meal-item bg-white p-4 rounded-fp shadow-fp-card mb-3 flex items-center space-x-4 opacity-80">
                    <img src="https://images.unsplash.com/photo-1565299624946-b28f40a0ae38?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80" alt="Chicken Salad" class="w-16 h-16 rounded-md object-cover">
                    <div class="flex-grow">
                        <h3 class="font-medium text-fp-neutral-text">Chicken Salad</h3>
                        <p class="text-xs text-fp-neutral-text-light">Dinner - Today, 7:00 PM</p>
                    </div>
                    <svg class="w-5 h-5 text-fp-neutral-medium" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>
                </div>

                 <!-- Meal Item 3 -->
                <div class="meal-item bg-white p-4 rounded-fp shadow-fp-card flex items-center space-x-4 opacity-60">
                    <img src="https://images.unsplash.com/photo-1484723050470-6944FL35DF69c?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80" alt="Oatmeal with Berries" class="w-16 h-16 rounded-md object-cover">
                    <div class="flex-grow">
                        <h3 class="font-medium text-fp-neutral-text">Oatmeal & Berries</h3>
                        <p class="text-xs text-fp-neutral-text-light">Breakfast - Tomorrow, 8:00 AM</p>
                    </div>
                    <svg class="w-5 h-5 text-fp-neutral-medium" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>
                </div>
            </section>
        </main>

        <!-- Bottom Navigation Removed: Now handled by mobile.html.erb layout -->
        <!-- <nav class="bottom-nav sticky bottom-0"> ... </nav> -->
    </div>

    <!-- Personal Stats Popup (Hidden by default) -->
    <div id="personalStatsPopup" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-white p-6 rounded-lg shadow-xl max-w-sm w-full">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">Your Activity</h2>
                <button id="closeStatsPopupBtn" class="text-fp-neutral-text-light hover:text-fp-neutral-darkest">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            </div>
            <div class="space-y-3">
                <div class="flex justify-between">
                    <span>Meals Logged:</span>
                    <span class="font-semibold">128</span>
                </div>
                <div class="flex justify-between">
                    <span>Recipes Tried:</span>
                    <span class="font-semibold">45</span>
                </div>
                <div class="flex justify-between">
                    <span>Avg. Prep Time:</span>
                    <span class="font-semibold">22 min</span>
                </div>
                 <div class="flex justify-between">
                    <span>Favorite Cuisine:</span>
                    <span class="font-semibold">Italian</span>
                </div>
                <div class="mt-4 pt-4 border-t border-fp-neutral-medium">
                    <h3 class="text-sm font-medium text-fp-neutral-text-light mb-1">Streak</h3>
                    <p class="text-2xl font-bold text-fp-primary-green">14 Days <span class="text-base font-normal">Logged In!</span></p>
                </div>
            </div>
        </div>
    </div>

    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: { sans: ['Poppins', 'sans-serif'], display: ['Satisfy', 'cursive'], },
                    colors: { // ...
                        'fp-body-bg': '#E7F1D3', 'fp-primary-green': '#5AD479', 'fp-primary-green-dark': '#34C759',
                        'fp-accent-blue': '#5A6AD4', 'fp-accent-blue-dark': '#4755c4', 'fp-neutral-text': '#111827',
                        'fp-neutral-darkest': '#333333', 'fp-neutral-lightest': '#FBFDF8', 'fp-white': '#FFFFFF',
                        'fp-neutral-medium': '#D1D5DB', 'fp-error': '#DC3545', 'fp-accent-yellow': '#F0AB1F',
                        'fp-neutral-text-light': '#6B7280', 'gray-100': '#f3f4f6',
                    }, // ...
                    boxShadow: { 'fp-cta': '0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06)', 'fp-card': '0 2px 8px rgba(0,0,0,0.07)', },
                    borderRadius: { 'fp': '0.5rem', }
                }
            }
        }

        // --- Circular Timer Script (Adapted from specialized_components.html) ---
        function runInteractiveTimer(timerId) {
            const timerContainer = document.getElementById(timerId);
            if (!timerContainer) return;

            const layers = {
                untilPrep: timerContainer.querySelector('.timer-layer-until-prep'),
                prep: timerContainer.querySelector('.timer-layer-prep'),
                cook: timerContainer.querySelector('.timer-layer-cook'),
                eat: timerContainer.querySelector('.timer-layer-eat'),
            };
            const timeLeftDisplay = timerContainer.querySelector('.time-left');
            const statusDisplay = timerContainer.querySelector('.status');

            const phases = [
                { name: "Until Prep", duration: 60 * 60 * 3 + 45 * 60, color: '#5A6AD4', layer: layers.untilPrep, nextLayerColor: '#F0AB1F' }, // 03:45:00
                { name: "Prep Time",  duration: 60 * 7 + 30, color: '#F0AB1F', layer: layers.prep, nextLayerColor: '#FD7E14' },    // 00:07:30
                { name: "Cook Time",  duration: 60 * 3 + 45, color: '#FD7E14', layer: layers.cook, nextLayerColor: '#5AD479' },    // 00:03:45
                { name: "Meal Time",  duration: 60 * 15, color: '#5AD479', layer: layers.eat, nextLayerColor: '#fbfdf8' }     // 00:15:00
            ];

            let currentPhaseIndex = 0;
            let _current_time_in_phase = phases[currentPhaseIndex].duration;
            let intervalId = null;

            function formatTime(seconds) {
                const h = Math.floor(seconds / 3600);
                const m = Math.floor((seconds % 3600) / 60);
                const s = seconds % 60;
                if (h > 0) {
                    const hoursString = h.toString();
                    return `${hoursString}:${m.toString().padStart(2, '0')}`;
                }
                return `${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;
            }

            function updateTimerDisplay() {
                timeLeftDisplay.textContent = formatTime(_current_time_in_phase);

                const currentPhase = phases[currentPhaseIndex];
                if (currentPhase.name === "Until Prep") {
                    const now = new Date();
                    const prepStartTime = new Date(now.getTime() + _current_time_in_phase * 1000);

                    let hours = prepStartTime.getHours();
                    const minutes = prepStartTime.getMinutes();
                    const ampm = hours >= 12 ? 'pm' : 'am';
                    hours = hours % 12;
                    hours = hours ? hours : 12; // Handle midnight (0 hours)
                    const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;
                    const targetTimeFormatted = hours + ':' + formattedMinutes + ampm;

                    statusDisplay.innerHTML = currentPhase.name + "<br>" + targetTimeFormatted;
                } else {
                    statusDisplay.textContent = currentPhase.name;
                }

                const _p = (_current_time_in_phase / currentPhase.duration) * 100;
                const percentageReceded = 100 - _p;

                currentPhase.layer.style.background = `conic-gradient(transparent 0% ${percentageReceded}%, ${currentPhase.color} ${percentageReceded}% 100%)`;

                for (let i = 0; i < currentPhaseIndex; i++) {
                    phases[i].layer.style.background = `conic-gradient(transparent 0% 100%)`;
                }
                for (let i = currentPhaseIndex + 1; i < phases.length; i++) {
                    phases[i].layer.style.background = phases[i].color;
                }
                if (currentPhaseIndex + 1 < phases.length) {
                    phases[currentPhaseIndex + 1].layer.style.background = phases[currentPhaseIndex + 1].color;
                } else {
                     if (_p === 0) currentPhase.layer.style.background = `conic-gradient(transparent 0% 100%)`;
                }
            }

            function advancePhase() {
                currentPhaseIndex++;
                if (currentPhaseIndex >= phases.length) {
                    clearInterval(intervalId);
                    statusDisplay.textContent = "All Done!";
                    timeLeftDisplay.textContent = "00:00";
                    Object.values(layers).forEach(layer => layer.style.background = 'transparent');
                    return;
                }
                _current_time_in_phase = phases[currentPhaseIndex].duration;
                updateTimerDisplay();
            }

            function tick() {
                _current_time_in_phase--;
                if (_current_time_in_phase < 0) {
                    advancePhase();
                } else {
                    updateTimerDisplay();
                }
            }

            currentPhaseIndex = 0;
            _current_time_in_phase = phases[currentPhaseIndex].duration;
            layers.untilPrep.style.background = phases[0].color;
            layers.prep.style.background = phases[1].color;
            layers.cook.style.background = phases[2].color;
            layers.eat.style.background = phases[3].color;
            updateTimerDisplay();

            if (intervalId) clearInterval(intervalId);
            intervalId = setInterval(tick, 1000);
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Auto-start the timer for the dashboard
            runInteractiveTimer('dashboardLiveTimer');

            // Personal Stats Popup Logic
            const profileStatsBtn = document.getElementById('profileStatsBtn');
            const personalStatsPopup = document.getElementById('personalStatsPopup');
            const closeStatsPopupBtn = document.getElementById('closeStatsPopupBtn');

            if (profileStatsBtn && personalStatsPopup && closeStatsPopupBtn) {
                profileStatsBtn.addEventListener('click', () => {
                    personalStatsPopup.classList.remove('hidden');
                });

                closeStatsPopupBtn.addEventListener('click', () => {
                    personalStatsPopup.classList.add('hidden');
                });

                // Optional: Close popup if clicked outside the content
                personalStatsPopup.addEventListener('click', (event) => {
                    if (event.target === personalStatsPopup) { // Clicked on the backdrop
                        personalStatsPopup.classList.add('hidden');
                    }
                });
            }

            // Full DRI Report Modal Logic
            const fullDriReportBtn = document.getElementById('fullDriReportBtn');
            const fullDriReportModal = document.getElementById('fullDriReportModal');
            const closeDriReportBtn = document.getElementById('closeDriReportBtn');

            if (fullDriReportBtn && fullDriReportModal && closeDriReportBtn) {
                fullDriReportBtn.addEventListener('click', () => {
                    fullDriReportModal.classList.remove('hidden');
                });

                closeDriReportBtn.addEventListener('click', () => {
                    fullDriReportModal.classList.add('hidden');
                });

                // Close modal if clicked outside the content
                fullDriReportModal.addEventListener('click', (event) => {
                    if (event.target === fullDriReportModal) {
                        fullDriReportModal.classList.add('hidden');
                    }
                });
            }
        });
    </script>
</body>
</html>
