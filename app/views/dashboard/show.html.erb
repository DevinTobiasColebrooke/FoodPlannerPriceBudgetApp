<% content_for :title, "Food Planner - Dashboard" %>

<% content_for :head do %>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          fontFamily: { sans: ['Poppins', 'sans-serif'], display: ['Satisfy', 'cursive'], },
          colors: {
            'fp-body-bg': '#E7F1D3', 'fp-primary-green': '#5AD479', 'fp-primary-green-dark': '#34C759',
            'fp-accent-blue': '#5A6AD4', 'fp-accent-blue-dark': '#4755c4', 'fp-neutral-text': '#111827',
            'fp-neutral-darkest': '#333333', 'fp-neutral-lightest': '#FBFDF8', 'fp-white': '#FFFFFF',
            'fp-neutral-medium': '#D1D5DB', 'fp-error': '#DC3545', 'fp-accent-yellow': '#F0AB1F',
            'fp-neutral-text-light': '#6B7280', 'gray-100': '#f3f4f6',
          },
          boxShadow: { 'fp-cta': '0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06)', 'fp-card': '0 2px 8px rgba(0,0,0,0.07)', },
          borderRadius: { 'fp': '0.5rem', }
        }
      }
    }
  </script>
<% end %>

<div class="w-full h-screen flex flex-col">
  <!-- Header Area -->
  <header class="sticky top-0 z-10 p-4 sm:p-5 bg-fp-neutral-lightest shadow-sm flex justify-between items-center">
    <div>
      <p class="text-xs text-fp-neutral-text-light">Tuesday, Oct 26</p>
      <h1 class="font-display-prototype text-xl sm:text-2xl text-fp-neutral-darkest">Good Morning!</h1>
    </div>
    <button type="button" id="profileStatsBtn" aria-label="View personal statistics">
      <% if @current_user&.avatar_url.present? %>
        <%= image_tag @current_user.avatar_url, alt: "User Avatar", class: "w-8 h-8 sm:w-10 sm:h-10 rounded-full border-2 border-fp-primary-green p-0.5 bg-white", loading: "lazy" %>
      <% else %>
        <%= image_tag "920999-avatar/svg/001-man.svg", alt: "Default Avatar", class: "w-8 h-8 sm:w-10 sm:h-10 rounded-full border-2 border-fp-primary-green p-0.5 bg-white", loading: "lazy" %>
      <% end %>
    </button>
  </header>

  <!-- Main Dashboard Area -->
  <main class="main-dashboard-area flex-1 p-4 sm:p-6 overflow-auto">
    <!-- Eyebrow Quick Actions -->
    <div class="eyebrow-buttons-container">
      <button class="eyebrow-btn bg-fp-primary-green text-white text-xs font-medium py-2 px-3 rounded-full shadow-fp-cta whitespace-nowrap">Start Next Meal</button>
      <button class="eyebrow-btn bg-fp-accent-blue text-white text-xs font-medium py-2 px-3 rounded-full shadow-fp-cta whitespace-nowrap">Scan Barcode</button>
      <button class="eyebrow-btn bg-white text-fp-neutral-text text-xs font-medium py-2 px-3 rounded-full border border-fp-neutral-medium shadow-sm whitespace-nowrap">Quick Add Item</button>
      <button class="eyebrow-btn bg-white text-fp-neutral-text text-xs font-medium py-2 px-3 rounded-full border border-fp-neutral-medium shadow-sm whitespace-nowrap">Browse Recipes</button>
    </div>

    <!-- Timer and Nutrient Stats -->
    <div class="flex flex-col lg:flex-row gap-4 lg:gap-6">
      <div class="flex justify-center lg:flex-1">
        <%= render 'shared/timer', timer_id: 'dashboardLiveTimer', time_left: '03:45', status: 'Until Prep' %>
      </div>
      <div class="lg:flex-1">
        <%= render 'shared/nutrient_stats', nutrient_calculation: @nutrient_calculation %>
      </div>
    </div>

    <!-- Upcoming Meals Section -->
    <section class="mt-6 sm:mt-8 flex-1">
      <h2 class="text-base sm:text-lg font-semibold text-fp-neutral-darkest mb-3">Upcoming Meals</h2>

      <!-- Current Meal -->
      <%= render 'shared/meal_item',
          meal: {
            name: "Spaghetti Carbonara",
            image_url: "https://images.unsplash.com/photo-1546069901-ba9599a7e63c?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80",
            meal_type: "Lunch",
            scheduled_time: "Today, 12:30 PM",
            rating: 4.5,
            review_count: 23
          },
          current: true %>

      <!-- Next Meal -->
      <%= render 'shared/meal_item',
          meal: {
            name: "Chicken Salad",
            image_url: "https://images.unsplash.com/photo-1565299624946-b28f40a0ae38?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80",
            meal_type: "Dinner",
            scheduled_time: "Today, 7:00 PM"
          },
          current: false %>

      <!-- Future Meal -->
      <%= render 'shared/meal_item',
          meal: {
            name: "Oatmeal & Berries",
            image_url: "https://images.unsplash.com/photo-1484723050470-6944FL35DF69c?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80",
            meal_type: "Breakfast",
            scheduled_time: "Tomorrow, 8:00 AM"
          },
          current: false %>
    </section>
  </main>
</div>

<!-- Modals -->
<%= render 'shared/modal',
    modal_id: 'personalStatsPopup',
    close_id: 'closeStatsPopupBtn',
    max_width: 'sm',
    title: 'Your Activity',
    content: render('dashboard/personal_stats_content') %>

<%= render 'shared/modal',
    modal_id: 'fullDriReportModal',
    close_id: 'closeDriReportBtn',
    max_width: '2xl',
    title: 'Complete Dietary Reference Intake Report',
    content: render('dashboard/dri_report_content', nutrient_calculation: @nutrient_calculation) %>

<script>
// Timer Component (Single Line)
class Timer {
    constructor(timerId) {
        this.timerContainer = document.getElementById(timerId);
        if (!this.timerContainer) return;
        this.timerText = this.timerContainer.querySelector('.timer-line-text');
        this.totalSeconds = 3 * 3600 + 45 * 60; // Example: 3 hours 45 min
        this.intervalId = null;
        this.init();
    }

    formatTime(seconds) {
        const h = Math.floor(seconds / 3600);
        const m = Math.floor((seconds % 3600) / 60);
        return `${h} hours ${m} min`;
    }

    getTargetTime(seconds) {
        const now = new Date();
        const target = new Date(now.getTime() + seconds * 1000);
        let hours = target.getHours();
        const minutes = target.getMinutes();
        const ampm = hours >= 12 ? 'pm' : 'am';
        hours = hours % 12;
        hours = hours ? hours : 12;
        const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;
        return `${hours}:${formattedMinutes}${ampm}`;
    }

    updateTimerDisplay() {
        const timeStr = this.formatTime(this.totalSeconds);
        const targetTime = this.getTargetTime(this.totalSeconds);
        this.timerText.textContent = `${timeStr} Until Prep ${targetTime}`;
    }

    tick() {
        if (this.totalSeconds > 0) {
            this.totalSeconds--;
            this.updateTimerDisplay();
        } else {
            this.timerText.textContent = 'Prep Time!';
            clearInterval(this.intervalId);
        }
    }

    init() {
        this.updateTimerDisplay();
        if (this.intervalId) clearInterval(this.intervalId);
        this.intervalId = setInterval(() => this.tick(), 1000);
    }
}

// Modal Component
class Modal {
    constructor(modalId, triggerId, closeId) {
        this.modal = document.getElementById(modalId);
        this.trigger = document.getElementById(triggerId);
        this.closeBtn = document.getElementById(closeId);

        if (this.trigger) {
            this.trigger.addEventListener('click', () => this.open());
        }

        if (this.closeBtn) {
            this.closeBtn.addEventListener('click', () => this.close());
        }

        if (this.modal) {
            this.modal.addEventListener('click', (e) => {
                if (e.target === this.modal) this.close();
            });
        }
    }

    open() {
        if (this.modal) {
            this.modal.classList.remove('hidden');
        }
    }

    close() {
        if (this.modal) {
            this.modal.classList.add('hidden');
        }
    }
}

document.addEventListener('DOMContentLoaded', function() {
    // Initialize timer
    new Timer('dashboardLiveTimer');

    // Initialize modals
    new Modal('personalStatsPopup', 'profileStatsBtn', 'closeStatsPopupBtn');
    new Modal('fullDriReportModal', 'fullDriReportBtn', 'closeDriReportBtn');
});
</script>
